package fr.njiv;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JOptionPane;

import com.json.exceptions.JSONParsingException;
import com.json.parsers.JSONParser;
import com.json.parsers.JsonParserFactory;

public class Options {

	public static Map<String, Object> all;
	public static Map<String, Object> imageViewer;
	public static Map<String, Object> diaporama;
	
	private static int tries = 1;
	
	/**
	 * Load the configuration from the file conf.json at the root of the jar of the program
	 */
	public static void init() {
		try {
			init(new URL(new URL("file:"), "./conf.json"));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("unchecked")
	public static void init(URL filename) {
		
		tries++;

		try {
			// Open conf file
			InputStream is = filename.openStream();

			JsonParserFactory factory = JsonParserFactory.getInstance();
			JSONParser parser = factory.newJsonParser();
			all = (Map<String, Object>)parser.parseJson(is, "utf8");

			imageViewer = (Map<String, Object>) all.get("image_viewer");
			diaporama = (Map<String, Object>) all.get("diaporama");
			
	        is.close();
	        
			System.out.println("[i] Configuration sucessfully loaded");
			
	    } catch (FileNotFoundException e) {
			System.out.println("[x] Configuration file not found : "+e.getLocalizedMessage());

			if(tries > 2) {
				JOptionPane.showMessageDialog(null,
					    "Error while reading configuration file : can't open nor the conf file nor the packaged conf file",
					    "Error",
					    JOptionPane.ERROR_MESSAGE);
				System.exit(0);
			}

			URL defaultconf = fr.njiv.Options.class.getResource("conf.json");
			init(defaultconf);
	    } catch (IOException e) {
			System.out.println("[x] Can't read configuration file : "+e.getLocalizedMessage());
			JOptionPane.showMessageDialog(null,
				    "Error while reading configuration file : "+e.getLocalizedMessage(),
				    "Error",
				    JOptionPane.ERROR_MESSAGE);
			System.exit(0);
	    } catch (JSONParsingException e) {
			System.out.println("[x] Can't parse configuration file : "+e.getLocalizedMessage());
			JOptionPane.showMessageDialog(null,
				    "Error while parsing configuration file : "+e.getLocalizedMessage(),
				    "Error",
				    JOptionPane.ERROR_MESSAGE);
			System.exit(0);
	    }
		
	}
	
	/**
	 * Save the current configuration in the file conf.json at the root of the program
	 */
	public static void save() {
		try {
			System.out.println("[i] Configuration file save start...");
			File file = new File("conf.json.tmp");
			 
			// if file doesnt exists, then create it
			if (file.exists())
				file.delete();
			file.createNewFile();
	
			// open the buffered writer
			BufferedWriter bw = new BufferedWriter(new FileWriter(file.getAbsoluteFile()));
			bw.write("// Auto generated by Njiv the "+new Date().toString()+"\n{\n");
			internalSave(bw, 1, all);
			bw.write("}\n");
			bw.close();

			// Save the old file, and rename
			File fileOriginal = new File("conf.json");
			if(fileOriginal.exists()) {
				fileOriginal.renameTo(new File("conf.json.bak"));
				fileOriginal.delete();
			}
			file.renameTo(fileOriginal);

			System.out.println("[i] Configuration file save done !");
			
		} catch (IOException e) {
			System.out.println("[i] Error while saving configuration file : "+e.getLocalizedMessage());
			e.printStackTrace();
		}
	}

	/**
	 * Internal use for writing the json in the file
	 * @param bw
	 * @param lvl
	 * @param entries
	 * @throws IOException
	 */
	private static void internalSave(BufferedWriter bw, int lvl, Map<?, ?> entries) throws IOException {
		
		int size = entries.size();
		int i = 1;
		
		// For each entry
		for(Entry<?, ?> entry : entries.entrySet()) {
			// If it is another map
			if(entry.getValue() instanceof Map) {
				bw.write(getSpace(lvl)+'"'+entry.getKey()+"\" : {\n");
				internalSave(bw, lvl+1, (Map<?, ?>) entry.getValue());
				if(i >= size)
					bw.write(getSpace(lvl)+"}\n");
				else
					bw.write(getSpace(lvl)+"},\n");
			}
			// Value
			else {
				if(i >= size)
					bw.write(getSpace(lvl)+'"'+entry.getKey()+"\" : \""+entry.getValue()+"\"\n");
				else
					bw.write(getSpace(lvl)+'"'+entry.getKey()+"\" : \""+entry.getValue()+"\",\n");
			}
			i++;
		}
	}
	
	/**
	 * Return a String of n*4 spaces
	 * @param n
	 * @return
	 */
	private static String getSpace(int n) {
		StringBuilder str = new StringBuilder();
		for(; n > 0; n--)
			str.append("    ");
		return str.toString();
	}
	
}

